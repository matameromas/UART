
P1-Serial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000186  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001da  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000020c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  0000024c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000791  00000000  00000000  00000284  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006ae  00000000  00000000  00000a15  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000362  00000000  00000000  000010c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  00001428  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000069fc  00000000  00000000  0000148c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000066  00000000  00000000  00007e88  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00007eee  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000010a  00000000  00000000  00007f16  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	39 c0       	rjmp	.+114    	; 0x78 <__bad_interrupt>
   6:	00 00       	nop
   8:	37 c0       	rjmp	.+110    	; 0x78 <__bad_interrupt>
   a:	00 00       	nop
   c:	35 c0       	rjmp	.+106    	; 0x78 <__bad_interrupt>
   e:	00 00       	nop
  10:	33 c0       	rjmp	.+102    	; 0x78 <__bad_interrupt>
  12:	00 00       	nop
  14:	31 c0       	rjmp	.+98     	; 0x78 <__bad_interrupt>
  16:	00 00       	nop
  18:	2f c0       	rjmp	.+94     	; 0x78 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	2d c0       	rjmp	.+90     	; 0x78 <__bad_interrupt>
  1e:	00 00       	nop
  20:	2b c0       	rjmp	.+86     	; 0x78 <__bad_interrupt>
  22:	00 00       	nop
  24:	29 c0       	rjmp	.+82     	; 0x78 <__bad_interrupt>
  26:	00 00       	nop
  28:	27 c0       	rjmp	.+78     	; 0x78 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	25 c0       	rjmp	.+74     	; 0x78 <__bad_interrupt>
  2e:	00 00       	nop
  30:	23 c0       	rjmp	.+70     	; 0x78 <__bad_interrupt>
  32:	00 00       	nop
  34:	21 c0       	rjmp	.+66     	; 0x78 <__bad_interrupt>
  36:	00 00       	nop
  38:	1f c0       	rjmp	.+62     	; 0x78 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	1d c0       	rjmp	.+58     	; 0x78 <__bad_interrupt>
  3e:	00 00       	nop
  40:	1b c0       	rjmp	.+54     	; 0x78 <__bad_interrupt>
  42:	00 00       	nop
  44:	19 c0       	rjmp	.+50     	; 0x78 <__bad_interrupt>
  46:	00 00       	nop
  48:	17 c0       	rjmp	.+46     	; 0x78 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	15 c0       	rjmp	.+42     	; 0x78 <__bad_interrupt>
  4e:	00 00       	nop
  50:	13 c0       	rjmp	.+38     	; 0x78 <__bad_interrupt>
  52:	00 00       	nop
  54:	11 c0       	rjmp	.+34     	; 0x78 <__bad_interrupt>
  56:	00 00       	nop
  58:	0f c0       	rjmp	.+30     	; 0x78 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	0d c0       	rjmp	.+26     	; 0x78 <__bad_interrupt>
  5e:	00 00       	nop
  60:	0b c0       	rjmp	.+22     	; 0x78 <__bad_interrupt>
  62:	00 00       	nop
  64:	09 c0       	rjmp	.+18     	; 0x78 <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	77 d0       	rcall	.+238    	; 0x164 <main>
  76:	85 c0       	rjmp	.+266    	; 0x182 <_exit>

00000078 <__bad_interrupt>:
  78:	c3 cf       	rjmp	.-122    	; 0x0 <__vectors>

0000007a <UART_init>:
	TCNT1 =0;
	
}
void setup_timer(void)
{
	TCCR1B = (1<<CS11)|(1<<CS10);    //1:64 prescaler (meterlo en timer_init)
  7a:	80 e2       	ldi	r24, 0x20	; 32
  7c:	8b b9       	out	0x0b, r24	; 11
  7e:	8a b9       	out	0x0a, r24	; 10
  80:	08 95       	ret

00000082 <UART_send>:
  82:	cf 93       	push	r28
  84:	df 93       	push	r29
  86:	00 d0       	rcall	.+0      	; 0x88 <UART_send+0x6>
  88:	00 d0       	rcall	.+0      	; 0x8a <UART_send+0x8>
  8a:	cd b7       	in	r28, 0x3d	; 61
  8c:	de b7       	in	r29, 0x3e	; 62
  8e:	98 e0       	ldi	r25, 0x08	; 8
  90:	99 83       	std	Y+1, r25	; 0x01
  92:	1b 82       	std	Y+3, r1	; 0x03
  94:	1a 82       	std	Y+2, r1	; 0x02
  96:	1c 82       	std	Y+4, r1	; 0x04
  98:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
  9c:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
  a0:	23 5f       	subi	r18, 0xF3	; 243
  a2:	3f 4f       	sbci	r19, 0xFF	; 255
  a4:	3b 83       	std	Y+3, r19	; 0x03
  a6:	2a 83       	std	Y+2, r18	; 0x02
  a8:	1b b8       	out	0x0b, r1	; 11
  aa:	e4 e8       	ldi	r30, 0x84	; 132
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	61 e0       	ldi	r22, 0x01	; 1
  b0:	70 e0       	ldi	r23, 0x00	; 0
  b2:	a8 95       	wdr
  b4:	40 81       	ld	r20, Z
  b6:	51 81       	ldd	r21, Z+1	; 0x01
  b8:	2a 81       	ldd	r18, Y+2	; 0x02
  ba:	3b 81       	ldd	r19, Y+3	; 0x03
  bc:	96 2f       	mov	r25, r22
  be:	42 17       	cp	r20, r18
  c0:	53 07       	cpc	r21, r19
  c2:	08 f4       	brcc	.+2      	; 0xc6 <UART_send+0x44>
  c4:	97 2f       	mov	r25, r23
  c6:	9c 83       	std	Y+4, r25	; 0x04
  c8:	9c 81       	ldd	r25, Y+4	; 0x04
  ca:	99 23       	and	r25, r25
  cc:	91 f3       	breq	.-28     	; 0xb2 <UART_send+0x30>
  ce:	1c 82       	std	Y+4, r1	; 0x04
  d0:	a0 e0       	ldi	r26, 0x00	; 0
  d2:	e4 e8       	ldi	r30, 0x84	; 132
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	61 e0       	ldi	r22, 0x01	; 1
  d8:	7a 2f       	mov	r23, r26
  da:	2a 81       	ldd	r18, Y+2	; 0x02
  dc:	3b 81       	ldd	r19, Y+3	; 0x03
  de:	23 5f       	subi	r18, 0xF3	; 243
  e0:	3f 4f       	sbci	r19, 0xFF	; 255
  e2:	3b 83       	std	Y+3, r19	; 0x03
  e4:	2a 83       	std	Y+2, r18	; 0x02
  e6:	80 fd       	sbrc	r24, 0
  e8:	02 c0       	rjmp	.+4      	; 0xee <UART_send+0x6c>
  ea:	9a 2f       	mov	r25, r26
  ec:	01 c0       	rjmp	.+2      	; 0xf0 <UART_send+0x6e>
  ee:	90 e2       	ldi	r25, 0x20	; 32
  f0:	9b b9       	out	0x0b, r25	; 11
  f2:	86 95       	lsr	r24
  f4:	ac 83       	std	Y+4, r26	; 0x04
  f6:	a8 95       	wdr
  f8:	40 81       	ld	r20, Z
  fa:	51 81       	ldd	r21, Z+1	; 0x01
  fc:	2a 81       	ldd	r18, Y+2	; 0x02
  fe:	3b 81       	ldd	r19, Y+3	; 0x03
 100:	96 2f       	mov	r25, r22
 102:	42 17       	cp	r20, r18
 104:	53 07       	cpc	r21, r19
 106:	08 f4       	brcc	.+2      	; 0x10a <UART_send+0x88>
 108:	97 2f       	mov	r25, r23
 10a:	9c 83       	std	Y+4, r25	; 0x04
 10c:	9c 81       	ldd	r25, Y+4	; 0x04
 10e:	99 23       	and	r25, r25
 110:	91 f3       	breq	.-28     	; 0xf6 <UART_send+0x74>
 112:	99 81       	ldd	r25, Y+1	; 0x01
 114:	91 50       	subi	r25, 0x01	; 1
 116:	99 83       	std	Y+1, r25	; 0x01
 118:	91 11       	cpse	r25, r1
 11a:	df cf       	rjmp	.-66     	; 0xda <UART_send+0x58>
 11c:	80 e2       	ldi	r24, 0x20	; 32
 11e:	8b b9       	out	0x0b, r24	; 11
 120:	8a 81       	ldd	r24, Y+2	; 0x02
 122:	9b 81       	ldd	r25, Y+3	; 0x03
 124:	0d 96       	adiw	r24, 0x0d	; 13
 126:	9b 83       	std	Y+3, r25	; 0x03
 128:	8a 83       	std	Y+2, r24	; 0x02
 12a:	e4 e8       	ldi	r30, 0x84	; 132
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	91 e0       	ldi	r25, 0x01	; 1
 130:	60 e0       	ldi	r22, 0x00	; 0
 132:	a8 95       	wdr
 134:	40 81       	ld	r20, Z
 136:	51 81       	ldd	r21, Z+1	; 0x01
 138:	2a 81       	ldd	r18, Y+2	; 0x02
 13a:	3b 81       	ldd	r19, Y+3	; 0x03
 13c:	89 2f       	mov	r24, r25
 13e:	42 17       	cp	r20, r18
 140:	53 07       	cpc	r21, r19
 142:	08 f4       	brcc	.+2      	; 0x146 <UART_send+0xc4>
 144:	86 2f       	mov	r24, r22
 146:	8c 83       	std	Y+4, r24	; 0x04
 148:	8c 81       	ldd	r24, Y+4	; 0x04
 14a:	88 23       	and	r24, r24
 14c:	91 f3       	breq	.-28     	; 0x132 <UART_send+0xb0>
 14e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 152:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 156:	0f 90       	pop	r0
 158:	0f 90       	pop	r0
 15a:	0f 90       	pop	r0
 15c:	0f 90       	pop	r0
 15e:	df 91       	pop	r29
 160:	cf 91       	pop	r28
 162:	08 95       	ret

00000164 <main>:
}

int main(void)
{
	UART_init();
 164:	8a df       	rcall	.-236    	; 0x7a <UART_init>
	TCNT1 =0;
	
}
void setup_timer(void)
{
	TCCR1B = (1<<CS11)|(1<<CS10);    //1:64 prescaler (meterlo en timer_init)
 166:	83 e0       	ldi	r24, 0x03	; 3
 168:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	
	for(;;)
	{
	    //Read timer value and act according with it
		
		UART_send(0x50);
 16c:	80 e5       	ldi	r24, 0x50	; 80
 16e:	89 df       	rcall	.-238    	; 0x82 <UART_send>
		UART_send(0x25);
 170:	85 e2       	ldi	r24, 0x25	; 37
 172:	87 df       	rcall	.-242    	; 0x82 <UART_send>
		UART_send(0x41);
 174:	81 e4       	ldi	r24, 0x41	; 65
 176:	85 df       	rcall	.-246    	; 0x82 <UART_send>
		UART_send(0x0A);
 178:	8a e0       	ldi	r24, 0x0A	; 10
 17a:	83 df       	rcall	.-250    	; 0x82 <UART_send>
		UART_send(0x0D);
 17c:	8d e0       	ldi	r24, 0x0D	; 13
 17e:	81 df       	rcall	.-254    	; 0x82 <UART_send>
		
    }
 180:	f5 cf       	rjmp	.-22     	; 0x16c <main+0x8>

00000182 <_exit>:
 182:	f8 94       	cli

00000184 <__stop_program>:
 184:	ff cf       	rjmp	.-2      	; 0x184 <__stop_program>
