
P1-Serial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000154  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000001c8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001c8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000238  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000770  00000000  00000000  00000278  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006e8  00000000  00000000  000009e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000307  00000000  00000000  000010d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000084  00000000  00000000  000013d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00006d6f  00000000  00000000  0000145c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000093  00000000  00000000  000081cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  0000825e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000011f  00000000  00000000  0000828e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	41 c0       	rjmp	.+130    	; 0x88 <__bad_interrupt>
   6:	00 00       	nop
   8:	3f c0       	rjmp	.+126    	; 0x88 <__bad_interrupt>
   a:	00 00       	nop
   c:	3d c0       	rjmp	.+122    	; 0x88 <__bad_interrupt>
   e:	00 00       	nop
  10:	3b c0       	rjmp	.+118    	; 0x88 <__bad_interrupt>
  12:	00 00       	nop
  14:	39 c0       	rjmp	.+114    	; 0x88 <__bad_interrupt>
  16:	00 00       	nop
  18:	37 c0       	rjmp	.+110    	; 0x88 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	35 c0       	rjmp	.+106    	; 0x88 <__bad_interrupt>
  1e:	00 00       	nop
  20:	33 c0       	rjmp	.+102    	; 0x88 <__bad_interrupt>
  22:	00 00       	nop
  24:	31 c0       	rjmp	.+98     	; 0x88 <__bad_interrupt>
  26:	00 00       	nop
  28:	2f c0       	rjmp	.+94     	; 0x88 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	2d c0       	rjmp	.+90     	; 0x88 <__bad_interrupt>
  2e:	00 00       	nop
  30:	30 c0       	rjmp	.+96     	; 0x92 <__vector_12>
  32:	00 00       	nop
  34:	29 c0       	rjmp	.+82     	; 0x88 <__bad_interrupt>
  36:	00 00       	nop
  38:	27 c0       	rjmp	.+78     	; 0x88 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	25 c0       	rjmp	.+74     	; 0x88 <__bad_interrupt>
  3e:	00 00       	nop
  40:	23 c0       	rjmp	.+70     	; 0x88 <__bad_interrupt>
  42:	00 00       	nop
  44:	21 c0       	rjmp	.+66     	; 0x88 <__bad_interrupt>
  46:	00 00       	nop
  48:	1f c0       	rjmp	.+62     	; 0x88 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	1d c0       	rjmp	.+58     	; 0x88 <__bad_interrupt>
  4e:	00 00       	nop
  50:	1b c0       	rjmp	.+54     	; 0x88 <__bad_interrupt>
  52:	00 00       	nop
  54:	19 c0       	rjmp	.+50     	; 0x88 <__bad_interrupt>
  56:	00 00       	nop
  58:	17 c0       	rjmp	.+46     	; 0x88 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	15 c0       	rjmp	.+42     	; 0x88 <__bad_interrupt>
  5e:	00 00       	nop
  60:	13 c0       	rjmp	.+38     	; 0x88 <__bad_interrupt>
  62:	00 00       	nop
  64:	11 c0       	rjmp	.+34     	; 0x88 <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	5a d0       	rcall	.+180    	; 0x13a <main>
  86:	64 c0       	rjmp	.+200    	; 0x150 <_exit>

00000088 <__bad_interrupt>:
  88:	bb cf       	rjmp	.-138    	; 0x0 <__vectors>

0000008a <UART_init>:
	TIMSK1 = (1<<OCIE1B);							//Enable timer interrupts	
}

void TIMER_init(void)
{												// CTC mode allows for automatic OutComp
	TCCR1B = (1<<WGM12)|(1<<CS11)|(1<<CS10);    //Enable CTC mode, and set prescaler to 1:64
  8a:	80 e2       	ldi	r24, 0x20	; 32
  8c:	8b b9       	out	0x0b, r24	; 11
  8e:	8a b9       	out	0x0a, r24	; 10
  90:	08 95       	ret

00000092 <__vector_12>:
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
  9c:	8f 93       	push	r24
  9e:	9f 93       	push	r25
  a0:	ef 93       	push	r30
  a2:	ff 93       	push	r31
  a4:	ea e8       	ldi	r30, 0x8A	; 138
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	80 81       	ld	r24, Z
  aa:	91 81       	ldd	r25, Z+1	; 0x01
  ac:	0d 96       	adiw	r24, 0x0d	; 13
  ae:	91 83       	std	Z+1, r25	; 0x01
  b0:	80 83       	st	Z, r24
  b2:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <cont>
  b6:	81 50       	subi	r24, 0x01	; 1
  b8:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <cont>
  bc:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <cont>
  c0:	8b 30       	cpi	r24, 0x0B	; 11
  c2:	88 f4       	brcc	.+34     	; 0xe6 <__vector_12+0x54>
  c4:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <cont>
  c8:	81 30       	cpi	r24, 0x01	; 1
  ca:	69 f0       	breq	.+26     	; 0xe6 <__vector_12+0x54>
  cc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  d0:	80 fd       	sbrc	r24, 0
  d2:	02 c0       	rjmp	.+4      	; 0xd8 <__vector_12+0x46>
  d4:	80 e0       	ldi	r24, 0x00	; 0
  d6:	01 c0       	rjmp	.+2      	; 0xda <__vector_12+0x48>
  d8:	80 e2       	ldi	r24, 0x20	; 32
  da:	8b b9       	out	0x0b, r24	; 11
  dc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  e0:	86 95       	lsr	r24
  e2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
  e6:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <cont>
  ea:	81 30       	cpi	r24, 0x01	; 1
  ec:	11 f4       	brne	.+4      	; 0xf2 <__vector_12+0x60>
  ee:	80 e2       	ldi	r24, 0x20	; 32
  f0:	8b b9       	out	0x0b, r24	; 11
  f2:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <cont>
  f6:	81 11       	cpse	r24, r1
  f8:	02 c0       	rjmp	.+4      	; 0xfe <__vector_12+0x6c>
  fa:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
  fe:	a8 95       	wdr
 100:	ff 91       	pop	r31
 102:	ef 91       	pop	r30
 104:	9f 91       	pop	r25
 106:	8f 91       	pop	r24
 108:	0f 90       	pop	r0
 10a:	0f be       	out	0x3f, r0	; 63
 10c:	0f 90       	pop	r0
 10e:	1f 90       	pop	r1
 110:	18 95       	reti

00000112 <UART_send>:
 112:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 116:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 11a:	23 5f       	subi	r18, 0xF3	; 243
 11c:	3f 4f       	sbci	r19, 0xFF	; 255
 11e:	30 93 8b 00 	sts	0x008B, r19	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 122:	20 93 8a 00 	sts	0x008A, r18	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
 126:	1b b8       	out	0x0b, r1	; 11
 128:	9a e0       	ldi	r25, 0x0A	; 10
 12a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <cont>
 12e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 132:	84 e0       	ldi	r24, 0x04	; 4
 134:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 138:	08 95       	ret

0000013a <main>:
}

int main(void)
{
	UART_init();
 13a:	a7 df       	rcall	.-178    	; 0x8a <UART_init>
	TIMSK1 = (1<<OCIE1B);							//Enable timer interrupts	
}

void TIMER_init(void)
{												// CTC mode allows for automatic OutComp
	TCCR1B = (1<<WGM12)|(1<<CS11)|(1<<CS10);    //Enable CTC mode, and set prescaler to 1:64
 13c:	8b e0       	ldi	r24, 0x0B	; 11
 13e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>

int main(void)
{
	UART_init();
	TIMER_init();
	sei();										//Enable global interrupts
 142:	78 94       	sei

	UART_send(0x4A);
 144:	8a e4       	ldi	r24, 0x4A	; 74
 146:	e5 df       	rcall	.-54     	; 0x112 <UART_send>
	UART_send(0x4A);
 148:	8a e4       	ldi	r24, 0x4A	; 74
 14a:	e3 df       	rcall	.-58     	; 0x112 <UART_send>
	for(;;)
	{
	    //Read timer value and act according with it
		wdt_reset();
 14c:	a8 95       	wdr
		//UART_send(0x45);
    }
 14e:	fe cf       	rjmp	.-4      	; 0x14c <main+0x12>

00000150 <_exit>:
 150:	f8 94       	cli

00000152 <__stop_program>:
 152:	ff cf       	rjmp	.-2      	; 0x152 <__stop_program>
